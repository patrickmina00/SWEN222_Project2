package nodes.rooms;

import gameworld.Orientation;
import gameworld.items.ItemState;
import gameworld.items.Type;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JLabel;

import assets.images.items.InventoryImageUtility;
import assets.images.roomforeground.RoomForegroundImageLoader;
import nodes.BasicNode;
import nodes.ItemNode;
import nodes.PlayerNode;
import nodes.RoomNode;
import ui.GamePanel;
import ui.rooms.BackgroundDrawer;
import ui.rooms.ForegroundDrawer;
import controllers.Controller;
import controllers.SinglePlayer;
import datastorage.GameState;

public class ExitDrawer implements Drawer{

private Controller controller;
	
	//DroppedItems
	private JLabel keyLabel;
	private JLabel radiationLabel;
	private JLabel screwdriverLabel;
	private JLabel torchLabel;
	private JLabel playerLabel;
	
	ItemNode panelNode = null;
	ItemNode wiresNode = null;	
	ItemNode keyNode = null;
	ItemNode radiationNode = null;
	ItemNode screwdriverNode = null;
	ItemNode torchNode = null;
	
	boolean firstPaint = true;
	
	private JLabel panelIcon;
	private JLabel wiresIcon;

	public ExitDrawer(ArrayList<BasicNode> children, Controller controller) {
		this.controller = controller;
		
		for(BasicNode bNode: children){
			if(bNode.getId() == 4){
				if(bNode instanceof ItemNode){
					torchNode = (ItemNode) bNode;
				}	
			} else if(bNode.getId() == 6){
				if(bNode instanceof ItemNode){
					radiationNode = (ItemNode) bNode;
				}
			} else if(bNode.getId() == 9){
				if(bNode instanceof ItemNode){
					screwdriverNode = (ItemNode) bNode;
				}	
			} else if(bNode.getId() == 12){
				if(bNode instanceof ItemNode){
					keyNode = (ItemNode) bNode;
				}	
			} else if(bNode.getId() == 10){
				if(bNode instanceof ItemNode){
					panelNode = (ItemNode) bNode;
				}
				
			}else if(bNode.getId() == 11){
				if(bNode instanceof ItemNode){
					wiresNode = (ItemNode) bNode;
				}
			}
			
		}
		
		panelIcon = new JLabel();
		wiresIcon = new JLabel();
		panelIcon.setIcon(new ImageIcon(RoomForegroundImageLoader.getPanelBack()));
		wiresIcon.setIcon(new ImageIcon(RoomForegroundImageLoader.getWiresBack()));
		panelIcon.setBounds(168, 280, 50, 50);
		wiresIcon.setBounds(168, 280, 50, 50);
		panelIcon.setVisible(true);
		wiresIcon.setVisible(false);
	}

	@Override
	public void paintRoom(Graphics g, Controller controller, GamePanel gamePanel, Orientation orientation, RoomNode r, GameState gs) {
			
		if(orientation.equals(Orientation.NORTH)){	
			
			panelIcon.setIcon(new ImageIcon(RoomForegroundImageLoader.getPanelLeft()));
			wiresIcon.setIcon(new ImageIcon(RoomForegroundImageLoader.getWiresLeft()));
			panelIcon.setBounds(0, 290, 50, 60);
			wiresIcon.setBounds(0, 290, 50, 50);
			BackgroundDrawer.drawBackgroundVerticalStyle(g, gamePanel);			
			ForegroundDrawer.drawDoorRight(g, gamePanel);
			ForegroundDrawer.drawDoorRight(g, gamePanel);
			ForegroundDrawer.drawExitLeft(g, gamePanel);
			
			if(panelNode.getState() == ItemState.TRUE){	
				panelIcon.setVisible(true);
				wiresIcon.setVisible(false);
			}else{
				panelIcon.setVisible(false);
				wiresIcon.setVisible(true);
			}
		
			
		}else if(orientation.equals(Orientation.EAST)){
			panelIcon.setVisible(false);
			wiresIcon.setVisible(false);
			BackgroundDrawer.drawBackgroundHorizontalStyle(g, gamePanel);			
			ForegroundDrawer.drawDoorBack(g, gamePanel);
			
		}else if(orientation.equals(Orientation.SOUTH)){
			panelIcon.setIcon(new ImageIcon(RoomForegroundImageLoader.getPanelRight()));
			wiresIcon.setIcon(new ImageIcon(RoomForegroundImageLoader.getWiresRight()));
			panelIcon.setBounds(425, 280, 50, 50);
			wiresIcon.setBounds(425, 280, 50, 50);
			BackgroundDrawer.drawBackgroundVerticalStyle(g, gamePanel);			
			ForegroundDrawer.drawDoorLeft(g, gamePanel);
			ForegroundDrawer.drawExitRight(g, gamePanel);
			
			if(panelNode.getState() == ItemState.TRUE){	
				panelIcon.setVisible(true);
				wiresIcon.setVisible(false);
			}else{
				panelIcon.setVisible(false);
				wiresIcon.setVisible(true);
			}
		
			
		}else if(orientation.equals(Orientation.WEST)){
			panelIcon.setIcon(new ImageIcon(RoomForegroundImageLoader.getPanelBack()));
			wiresIcon.setIcon(new ImageIcon(RoomForegroundImageLoader.getWiresBack()));
			panelIcon.setBounds(168, 280, 50, 50);
			wiresIcon.setBounds(168, 280, 50, 50);
			BackgroundDrawer.drawBackgroundHorizontalStyle(g, gamePanel);	
			ForegroundDrawer.drawExit(g, gamePanel);
						
			if(panelNode.getState() == ItemState.TRUE){	
				panelIcon.setVisible(true);
				wiresIcon.setVisible(false);
			}else{
				panelIcon.setVisible(false);
				wiresIcon.setVisible(true);
			}
			
			
		}
		
		keyLabel = new JLabel();
		radiationLabel = new JLabel();
		screwdriverLabel = new JLabel();
		torchLabel = new JLabel();
		playerLabel = new JLabel();
		
		if(firstPaint){
			this.addPanelWires(gamePanel);
			BasicNode[] nodes = new BasicNode[4];
			nodes[0] = keyNode;
			nodes[1] = radiationNode;
			nodes[2] = torchNode;
			nodes[3] = screwdriverNode;
			
			JLabel[] labels = InventoryImageUtility.setLabels(nodes);
			keyLabel = labels[0];
			radiationLabel = labels[1];
			torchLabel = labels[2];
			screwdriverLabel = labels[3];
			
			gamePanel.add(keyLabel);
			gamePanel.add(radiationLabel);
			gamePanel.add(torchLabel);
			gamePanel.add(screwdriverLabel);
			
			if(otherPlayerPresent(gs,r)){
				playerLabel.setIcon(new ImageIcon(InventoryImageUtility.getInventoryImage(14)));
				playerLabel.setBounds(100,100,100,137);
				gamePanel.add(playerLabel);
				
			}
			
			firstPaint = false;
			}
	}

	private void addPanelWires(GamePanel gamePanel) {
		gamePanel.add(wiresIcon);
		gamePanel.add(panelIcon);		
	}

	@Override
	public void mouseClicked(Point p) {
		checkItemClick(p);
		
	}
	
	@Override
	public void checkItemClick(Point p) {
		
		Rectangle keyRect = keyLabel.getBounds();
		Rectangle radiationRect = radiationLabel.getBounds();
		Rectangle screwdriverRect = screwdriverLabel.getBounds();
		Rectangle torchRect = torchLabel.getBounds();
		Rectangle panel = panelIcon.getBounds();
		Rectangle wires = panelIcon.getBounds();
		
		if(keyRect.contains(p)){	
			controller.pickUpItem(keyNode);			
		}
		else if(torchRect.contains(p)){
			controller.pickUpItem(torchNode);
		}
		else if(radiationRect.contains(p)){
			controller.pickUpItem(radiationNode);
		}
		else if(screwdriverRect.contains(p)){
			controller.pickUpItem(screwdriverNode);
		} 
		else if (panelNode.getState() == ItemState.TRUE){	
<<<<<<< .merge_file_a05568
			if(panel.contains(p)){
				

				
				controller.openPanel();
				
=======
			if(panel.contains(p)){			
				controller.openPanel();		
>>>>>>> .merge_file_a06664
			}
		}else{
			if(wires.contains(p)){
				controller.win();
			}
		}
		
		}

	@Override
	public boolean otherPlayerPresent(GameState gs, RoomNode r) {
		PlayerNode[] players = new PlayerNode[2];
		int i = 0;
		for(PlayerNode pn : gs.getPlayers()){
				players[i] = pn;
				i++;
			}
		if(players[1] == null){
			return false;
		}
		else {
			return players[0].getRoomID() == players[1].getRoomID();
		}
	}
	}

		
	
		
	


